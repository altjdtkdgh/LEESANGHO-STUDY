package coding_test.탐욕법;

public class 조이스틱 {
	/*
	 * 조이스틱으로 알파벳 이름을 완성하세요. 맨 처음엔 A로만 이루어져 있습니다.
ex) 완성해야 하는 이름이 세 글자면 AAA, 네 글자면 AAAA

조이스틱을 각 방향으로 움직이면 아래와 같습니다.

▲ - 다음 알파벳
▼ - 이전 알파벳 (A에서 아래쪽으로 이동하면 Z로)
◀ - 커서를 왼쪽으로 이동 (첫 번째 위치에서 왼쪽으로 이동하면 마지막 문자에 커서)
▶ - 커서를 오른쪽으로 이동
예를 들어 아래의 방법으로 "JAZ"를 만들 수 있습니다.

- 첫 번째 위치에서 조이스틱을 위로 9번 조작하여 J를 완성합니다.
- 조이스틱을 왼쪽으로 1번 조작하여 커서를 마지막 문자 위치로 이동시킵니다.
- 마지막 위치에서 조이스틱을 아래로 1번 조작하여 Z를 완성합니다.
따라서 11번 이동시켜 "JAZ"를 만들 수 있고, 이때가 최소 이동입니다.
만들고자 하는 이름 name이 매개변수로 주어질 때, 이름에 대해 조이스틱 조작 횟수의 최솟값을 return 하도록 solution 함수를 만드세요.

제한 사항
name은 알파벳 대문자로만 이루어져 있습니다.
name의 길이는 1 이상 20 이하입니다.
입출력 예
name	return
"JEROEN"	56
"JAN"	23
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(solution("JEROEN"));
	}
	
	public static int solution(String name) {
        int answer = 0;
        int cursor = name.length() - 1; //3-1 = 2
        for (int i = 0; i < name.length(); i++) {
			char a = name.charAt(i);
			answer += Math.min(Math.abs(a- 'A'), Math.abs('Z'- a +1));
			
			int next = i+1;
			while(next< name.length() && name.charAt(next) == 'A') {
				next++;
			}
			
			// i 다음부터 A의 갯수
            int As = next - i - 1;  // 2 -0 -1  = 1

            // 전체에서 A를 제외하고 움직이는 횟수
            int moveWithoutA = name.length() - As - 1;  //3 - 1 -1

            // 처음부터 i번째 까지 왔다가 돌아가는 방식과 처음에 맨뒤로 갔다가 다시 i번째 까지 오는 방식중 작은 값
            int min = Math.min(i, name.length() - next);    //0, 3-2 =1      : 0

            // 돌아가는거 없이 정방향으로 움직인 경우와 name의 각 위치마다 움직여야하는 커서 수들 중 작은 값
            cursor = Math.min(cursor, moveWithoutA + min);    //2,    1+0    :     1
			
		}
        
        
        
        return answer+ cursor;
    }

}

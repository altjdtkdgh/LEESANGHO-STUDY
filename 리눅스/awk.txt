1. awk 명령어란?
awk 란 패턴 탐색과 처리를 위한 명령어로 간단하게 파일에서 결과를 추려내고 가공하여 원하는 결과물을 만들어내는 유틸리티입니다.
=================================================
2.awk 기본 명령어
awk [OPTION...] [awk program] [ARGUMENT...]
      OPTION
        -F        : 필드 구분 문자 지정.
        -f        : awk program 파일 경로 지정.
        -v        : awk program에서 사용될 특정 variable값 지정.
      awk program
        -f 옵션이 사용되지 않은 경우, awk가 실행할 awk program 코드 지정.
      ARGUMENT
        입력 파일 지정 또는 variable 값 지정.

================================================
3. awk 사용예제
필자는 주로 awk ‘{print $1}’ 과 같이 단순히 record를 출력해서 사용하는 방법에 대해서만 알고있지만, 아래와 같이 다양한 사용법이 있고, program도 넣어서 만들 수 있기에 다양하게 활용될 수 있다.

awk 사용 예	                                   명령어 옵션
파일의 전체 내용 출력	                       awk ‘{ print }’ [FILE]
필드 값 출력	                                   awk ‘{ print $1 }’ [FILE]
필드 값에 임의 문자열을 같이 출력	           awk ‘{print “STR”$1, “STR”$2}’ [FILE]
지정된 문자열을 포함하는 레코드만 출력          awk ‘/STR/’ [FILE]
특정 필드 값 비교를 통해 선택된 레코드만 출력  awk ‘$1 == 10 { print $2 }’ [FILE]
특정 필드들의 합 구하기	                        awk ‘{sum += $3} END { print sum }’ [FILE]
여러 필드들의 합 구하기	                        awk ‘{ for (i=2; i<=NF; i++) total += $i }; END { print "TOTAL : "total }' [FILE]
레코드 단위로 필드 합 및 평균 값 구하기	awk ‘{ sum = 0 } {sum += ($3+$4+$5) } { print $0, sum, sum/3 }’ [FILE]
필드에 연산을 수행한 결과 출력하기	            awk ‘{print $1, $2, $3+2, $4, $5}’ [FILE]
레코드 또는 필드의 문자열 길이 검사	            awk ‘ length($0) > 20’ [FILE]
파일에 저장된 awk program 실행	            awk -f [AWK FILE] [FILE]
필드 구분 문자 변경하기	                        awk -F ‘:’ ‘{ print $1 }’ [FILE]
awk 실행 결과 레코드 정렬하기	            awk ‘{ print $0 }’ [FILE]
특정 레코드만 출력하기	                        awk ‘NR == 2 { print $0; exit }’ [FILE]
출력 필드 너비 지정하기	                        awk ‘{ printf “%-3s %-8s %-4s %-4s %-4s\n”, $1, $2, $3, $4, $5}’ [FILE]
필드 중 최대 값 출력	                        awk ‘{max = 0; for (i=3; i max) ? $i : max ; print max}’ [FILE]


내장 함수
awk는 지정한 처리를 실행할 때 내장 함수를 이용할 수 있습니다.

함수	설명
sub	지정한 문자열 치환                                          $ echo "i have a water." | awk -F " " '{ sub("a", "b", $4); print $4 }'
gsub	문자열 일괄 치환                                             $ echo "i have a water." | awk -F " " '{ gsub("a", "b"); print $1" "$2" "$3" "$4 }'
index	주어진 문자열과 일치하는 문자의 인덱스를 반환     $ echo "i have a water." | awk -F " " '{ print index($4, "a") }'
length	문자열의 길이를 반환                                       $ echo "i have a water." | awk -F " " '{ print length($4) }'
substr	시작위치에서 주어진 길이 만큼의 문자열 반환       $ echo "1234567890" | awk -F " " '{ print substr($1, 3, 2) }'
split	문자열을 분리하여 배열로 반환                          $ echo "A/B/C/D/E/F/G" | awk -F " " '{ print split($1, array, "/");print array[1];print array[3]; }'
print	문자열 출력                                                 
printf	지정한 포맷에 따라 함수 출력                            $ echo | awk '{ printf("%.1f + %.2f = %.3f\n", 40.1, 20.2, 40.1 + 20.2); }'

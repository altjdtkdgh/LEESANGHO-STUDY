정의 : 마이크로서비스란 작고, 독립적으로 배포 가능한 각각의 기능을 수행하는 서비스로 구성된 프레임워크

- 장점

    (1) 서비스 별 개별 배포 가능(배포 시 전체 서비스의 중단 없음)

    (2) 특정 서비스에 대한 확장성이 용이함.

    (3) 장애가 전체 서비스로 확장될 가능성이 적음.

- 단점

    (1) 서비스 간 호출 시  API를 사용하기 떄문에, 통신 비용이나 Latency(지연 시간)가 그만큼 늘어나게 됩니다.

    (2) 서비스가 분리되어 있기 때문에 테스트와 트랜잭션의 복잡도가 증가하고, 많은 자원을 필요로 함.

    서비스들 인스턴스의 상태를 동적으로 관리하는 서버

    (3) 데이터가 여러 서비스에 걸쳐 분산되기 때문에 한번에 조회 하기 어려움.




- spring Cloud 및 Netflix oss
    - 서비스 디스커버리 서버(Eureka)

        인스턴스의 상태를 동적으로 관리하는 서버

    - 클라이언트 사이드 로드 밸런서(Ribbon)

         모놀리식 시스템은 부하 분산을 위해 L4 스위치 같은 하드웨어 사용. MSA는 소프트웨어로 구현한 Ribbon 사용.

    - API 게이트웨이 (Zuul)

        사용자 요청을 적절한 서비스로 라우팅하는 MSA 컴포넌트

    - Spring Cloud Config Server

        환경설정 외부화 및 중앙 집중화

    - 터빈 서버(Turbine Server)

        마이크로서비스에 설치된 히스트릭스 클라이언트 스트림을 통합해 주는 기능을 제공

    - 히스트릭스 대시보드 서버

        히스트릭스 클라이언트에서 생성하는 스트림을 시각화하여 웹화면에 보여주는 대시보드 화면

    - Spring Cloud Sleuth 와 Zipkin

        Sleuth: 각 서비스간의 트랜잭션을 연결해주는 상관관계ID를 자동으로 주입해준다

        Zipkin: 상관관계 ID를 기반으로 트랜잭션의 흐름을 시각적으로 보여준다.


- 클라이언트 회복성 패턴

    정의: 서비스에 성능저하가 발생할 때 해당 문제가 상향(upstream) 전파되는 것을 막는 서비스 구현 방식

    - 클라이언트 측 부하 분산

        넷플릭스 리본(Ribbon) 라이브러리가 서비스 디스커버리에서 서비스의 물리적 위치를 로컬 캐싱하고 로드 밸런싱을 수행하여 달성한다.

    - 회로 차단기(circuit breaker)

        서비스 호출을 모니터링한다. 타임아웃을 설정해두고 해당 타임아웃을 넘겨 실패하는 횟수가 충족되면 회로 차단기가 활성화되어 이후의 호출들은 모두 빨리 실패하게 만든다.

    - 폴백(fallback) 처리

        회로 차단기에 의해 서비스 호출이 빨리 실패할 경우 예외(exception)을 발생시키지 않고 대체 코드를 실행하여 다른 방법으로 작업을 수행

    - 벌크헤드(bulkhead)

        선박 건조 개념에서 유래. 배는 격벽(bulkhead)이라는 완전히 격리된 구획으로 나뉜다. 특정 선체에 구멍이 뚫려도 격벽으로 완전 격리되어있어 전체 배의 침수를 방지한다.

        소프트웨어에서도 원격호출을 수행할 때 스레드풀로 분리하여 특정 원격호출이 느려질 때 전체 애플리케이션이 다운될 수 있는 위험을 막는다.


